// 全局配置

// 先加载local.properties文件
Properties localProperties = new Properties()
try {
    def localFile = project.rootProject.file('local.properties')
    if (localFile != null && localFile.exists()) {
        localProperties.load(localFile.newDataInputStream())
    }
} catch (Exception ignored) {
    println("local.properties not found")
}

ext {
    // maven 本地仓库的位置
    LOCAL_MAVEN_DIR = null
    // 是否开启 maven 本地仓库（注意：开启后 https://jitpack.io/ 插件失效，只在本地测试时才开启）
    LOCAL_MAVEN_ENABLE = false
    // 在local.properties下配置，如：LOCAL_MAVEN_DIR=D://maven/xx
    if (!localProperties.isEmpty() && localProperties.containsKey("LOCAL_MAVEN_DIR")) {
        LOCAL_MAVEN_DIR = localProperties.getProperty("LOCAL_MAVEN_DIR", null)
        LOCAL_MAVEN_ENABLE = LOCAL_MAVEN_DIR != null
    }
    // jitpack库group
    JITPACK_GROUP = "com.github.y1xian"
    // 正式发布的 version
    RELEASE_MAVEN_VERSION = "1.0.1"
    // 测试插件的 group
    LOCAL_MAVEN_GROUP = "${JITPACK_GROUP}.android-tool"
    // 测试的 version , 版本高于正式
    LOCAL_MAVEN_VERSION = "1.0.2-SNAPSHOT"
    // 当前仓库版本 （upload本地版本，需要sync project）
    LIB_VERSION = LOCAL_MAVEN_ENABLE ? LOCAL_MAVEN_VERSION : RELEASE_MAVEN_VERSION
    println("是否开启本地仓库：$LOCAL_MAVEN_ENABLE  存放路径：$LOCAL_MAVEN_DIR 版本：$LIB_VERSION")

    // 统一仓库
    repositoriesExt = {
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://developer.huawei.com/repo/' }
        maven { url "https://jitpack.io" }
        mavenCentral()
        google()
        if (LOCAL_MAVEN_ENABLE) {
            // 本地仓库
            maven { url uri(LOCAL_MAVEN_DIR) }
        }
    }

    androidExt = [
            compileSdk     : 33,
            minSdk         : 21,
            applicationId  : "com.yyxnb.android",
            targetSdk      : 33,
            versionCode    : 1,
            versionName    : '2023.0320.0100',
            minifyEnabled  : false,
            shrinkResources: false,
            zipAlignEnabled: false
    ]

    compileOptionsExt_1_8 = {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 代码编译打包成dex
    dexOptionsExt = {
        // 使用增量模式构建
        incremental true
        // 最大堆内存
        javaMaxHeapSize "8g"
        // 是否支持大工程模式
        jumboMode = true
        // 预编译 dex 库。在我们build的时候会快些，但clean时便会慢，默认开启
        preDexLibraries = true
        // 线程数
        threadCount = 8
    }

    // 发现代码质量问题
    lintOptionsExt = {
        // true--关闭lint报告的分析进度
        quiet true
        //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        checkReleaseBuilds true
        // true--错误发生后停止gradle构建
        abortOnError false
        // true--只报告error
        ignoreWarnings true
        // true--忽略有错误的文件的全/绝对路径(默认是true)
        absolutePaths true
        // true--检查所有问题点，包含其他默认关闭项
        checkAllWarnings true
        // true--所有warning当做error
        warningsAsErrors true
    }

    versions = [
            android_plugin: '7.3.0',

            appcompat     : "1.4.0",

            multidex      : '2.0.1',
    ]

    classpathExt = [
            android_gradle: [group: 'com.android.tools.build', name: 'gradle', version: versions.android_plugin],
    ]

    dependenciesExt = [
            appcompat: [group: 'androidx.appcompat', name: 'appcompat', version: versions.appcompat],

            multidex : [group: 'androidx.multidex', name: 'multidex', version: versions.multidex],

            core_api : 'com.github.y1xian.android-tool:core-api:' + LIB_VERSION,
            core     : 'com.github.y1xian.android-tool:core:' + LIB_VERSION,

    ]

}