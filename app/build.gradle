plugins {
    id 'com.android.application'
}

android {
    //版本配置
    compileSdkVersion build_version.compileSdkVersion
    buildToolsVersion build_version.buildToolsVersion

    defaultConfig {
        applicationId build_version.applicationId
        minSdkVersion build_version.minSdkVersion
        targetSdkVersion build_version.targetSdkVersion
        versionCode build_version.versionCode
        versionName build_version.versionName
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
        ndk {
            //设置支持的SO库架构
//            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //防止编译的时候oom、GC
    dexOptions {
        preDexLibraries false
        maxProcessCount 8
        //分配给gradle的内存
        javaMaxHeapSize "4g"
    }
    lintOptions {
        // true--关闭lint报告的分析进度
//        quiet false
        //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        checkReleaseBuilds false
        // true--错误发生后停止gradle构建
        abortOnError false
    }

    aaptOptions {
        //停用 PNG 处理
        cruncherEnabled false
    }

    android.applicationVariants.all { variant ->
        // 更新至Android Studio 3.3 gradle 4.10.1
        variant.outputs.all {
            outputFileName = "app_${variant.versionName}.${variant.versionCode}.apk"
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraint
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation libs.junit
    androidTestImplementation libs.test_junit
    androidTestImplementation libs.test_espresso
    implementation(
            libs.cardview, libs.multidex
    )

    // 轻量级工具、无UI
    implementation(
            libs.lib_application, libs.lib_core, libs.lib_permission, libs.lib_anim, libs.lib_image, libs.lib_log,
            libs.lib_arch, libs.lib_room, libs.lib_binding, libs.lib_workmanager,
            libs.lib_network, libs.lib_okhttp, libs.lib_retrofit,
            libs.lib_adapter, libs.lib_paging,
            libs.lib_dialog
    )
    // 自定义组件、有UI
    implementation(
            libs.lib_view
    )

    annotationProcessor libs.room_compiler
    annotationProcessor libs.glide_compiler

    // 内存泄漏检测
    debugImplementation libs.leak_canary_debug
    releaseImplementation libs.leak_canary_release
    // Optional, if you use support library fragments:
    debugImplementation libs.leak_canary_debug_support

    // 刷新框架  https://github.com/scwang90/SmartRefreshLayout
    def smartVersion = '2.0.1'
    implementation 'com.scwang.smart:refresh-layout-kernel:' + smartVersion      //核心必须依赖
    implementation 'com.scwang.smart:refresh-header-classics:' + smartVersion    //经典刷新头
    implementation 'com.scwang.smart:refresh-header-material:' + smartVersion    //谷歌刷新头

    // 通过标签直接生成shape，无需再写shape.xml  https://github.com/JavaNoober/BackgroundLibrary
    implementation 'com.noober.background:core:1.6.5'

    // 屏幕适配 https://github.com/JessYanCoding/AndroidAutoSize
    implementation libs.autosize

}